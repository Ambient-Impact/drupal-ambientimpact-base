// -----------------------------------------------------------------------------
//   Base overlay component
// -----------------------------------------------------------------------------

@use 'sass:color';
@use 'sass/helpers/colour';

///
/// Overlay opacity when visible.
///
/// Note that this is applied to the overlay background colour rather than as
/// the opacity property to allow for full use of backdrop-filter. The effect of
/// backdrop-filter scales down along with the opacity property, but is not
/// affected by any opacity in the background colour itself.
///
$opacity: 0.8;

///
/// Overlay colour on light colour scheme.
///
$colour-light: colour.$background-light;

///
/// Overlay colour on dark colour scheme.
///
$colour-dark: colour.$background-dark;

:where(:root) { // Zero specificity.

  ///
  /// Overlay opacity when visible.
  ///
  --overlay-opacity: #{$opacity};

  ///
  /// Overlay colour on light colour scheme.
  ///
  --overlay-colour: #{$colour-light};

  @include colour.on-dark-scheme {

    ///
    /// Overlay opacity when visible in dark mode.
    ///
    /// This is less opaque than the light mode as this looks a bit closer
    /// perceptually to the light mode opacity when viewed in a darker
    /// environment.
    ///
    --overlay-opacity: #{$opacity * 0.75};

    ///
    /// Overlay colour on dark colour scheme.
    ///
    --overlay-colour: #{$colour-dark};

  }

}

.overlay {

  $test: color-mix(in srgb, black 50%, white);

  // color-mix() is currently better supported as of April 2024 than relative
  // color syntax (which is not supported by Firefox yet)
  //
  // @see https://bugzilla.mozilla.org/show_bug.cgi?id=1701488
  //   Ongoing bug to implement relative colours.
  //
  // @see https://caniuse.com/mdn-css_types_color_color-mix
  //
  // @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix
  //
  // @see https://caniuse.com/css-relative-colors
  @supports (background-color: #{$test}) {

    background-color: color-mix(
      in srgb,
      var(--overlay-colour)
      calc(var(--overlay-opacity) * 100%),
      transparent
    );

  }

  // If color-mix() is not supported, fall back to setting the colour with the
  // opacity directly, which is better than nothing but isn't as easy for themes
  // to customize.
  @supports not (background-color: #{$test}) {

    @include colour.set(
      $background: color.change($colour-light, $alpha: $opacity),
    );

    @include colour.on-dark-scheme {
      @include colour.set(
        $background: color.change($colour-dark, $alpha: $opacity),
      );
    }

  }

  &--is-active {
    opacity: 1;
  }

}
