<?php

use Drupal\ambientimpact_base\ResponsiveImageFormatterPreprocess;
use Drupal\ambientimpact_base\SiteBrandingBlockProperties;

/**
 * Implements hook_element_info_alter().
 *
 * This attaches the textarea component to textareas.
 *
 * This attaches the Material input component to text input types.
 */
function ambientimpact_base_element_info_alter(array &$info): void {
  if (isset($info['textarea'])) {
    $info['textarea']['#attached']['library'][] =
      'ambientimpact_ux/component.textarea';
  }

  foreach ([
    // Standard single-line text field.
   'textfield',

    // Standard multi-line textarea.
    'textarea',

    // Password fields.
    'password',
    'password_confirm',

    // HTML5 fields.
    'email',
    'search',
    'tel',
    'url',
    'number',
  ] as $elementName) {
    if (isset($info[$elementName])) {
      $info[$elementName]['#attached']['library'][] =
        'ambientimpact_ux/component.material.input';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This adds our 'input__button_element' as a template suggestion if an input
 * element has both core's '#is_button' variable and a custom
 * '#use_button_element' variable and both are set to true.
 *
 * @see input--button-element.html.twig
 *   Our custom template that outputs a <button> element rather than an <input>.
 *   Also documents rationale and links.
 */
function ambientimpact_base_theme_suggestions_input_alter(
  &$suggestions, array $variables
): void {
  if (
    isset($variables['element']['#is_button']) &&
    $variables['element']['#is_button'] === true &&
    isset($variables['element']['#use_button_element']) &&
    $variables['element']['#use_button_element'] === true
  ) {
    $suggestions[] = 'input__button_element';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This adds our 'node__extended' as a template suggestion so that we can
 * extend node.html.twig without re-implementing the whole template.
 */
function ambientimpact_base_theme_suggestions_node_alter(
  array &$suggestions, array $variables
): void {
  $suggestions[] = 'node__extended';
}

/**
 * Prepares variables for HTML document templates.
 *
 * This adds @code <meta name="color-scheme" content="dark light"> @endcode for
 * browsers that support it, to indicate that we want to opt in to them using
 * dark mode user agent styles (e.g. for the page background and form elements)
 * when @code @media (prefers-color-scheme: dark) @endcode applies.
 *
 * Default template: html.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - page: A render element representing the page.
 *
 * @see https://ambientimpact.com/web/snippets/the-color-scheme-meta-tag
 *
 * @see https://caniuse.com/mdn-html_elements_meta_name_color-scheme
 */
function ambientimpact_base_preprocess_html(array &$variables): void {

  $variables['page']['#attached']['html_head'][] = [
    [
      '#tag'        => 'meta',
      '#attributes' => [
        'name'    => 'color-scheme',
        'content' => 'dark light',
      ],
    ],
    'color-scheme',
  ];

}

/**
 * Prepares variables for the 'ambientimpact_block_social_links' block template.
 *
 * This attaches the 'ambientimpact_block/social_links.tooltips' library to the
 * block.
 */
function ambientimpact_base_preprocess_block__ambientimpact_block_social_links(
  array &$variables
): void {
  $variables['#attached']['library'][] =
    'ambientimpact_block/component.social_links.tooltips';
}

/**
 * Prepares variables for the 'system_branding_block' block template.
 *
 * @see \Drupal\ambientimpact_base\SiteBrandingBlockProperties::preprocess()
 *   Variables preprocessed by this.
 */
function ambientimpact_base_preprocess_block__system_branding_block(
  array &$variables
): void {

  \Drupal::classResolver(SiteBrandingBlockProperties::class)->preprocess(
    $variables
  );

}

/**
 * Prepares variables for field templates.
 *
 * This sets the 'constrain_width' value to false on media entity 'thumbnail'
 * fields so that small, low resolution thumbnails take up the same space as
 * high resolution thumbnails, in line with how they're shown in actual
 * YouTube/Vimeo embedded videos.
 *
 * This sets a max-width on image field items so that no phantom link space can
 * occur.
 *
 * This sets classes on link fields to indicate whether they have a link title
 * or are outputting the URL as their title. This is useful to force browsers to
 * wrap URLs so they don't break out of the layout.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\Image::preprocessFieldSetImageFieldMaxWidth()
 *   This adds a max-width on each field item.
 */
function ambientimpact_base_preprocess_field(&$variables, $hook): void {
  // Media thumbnail field.
  if (
    $variables['field_type'] === 'image' &&
    $variables['field_name'] === 'thumbnail'
  ) {
    foreach ($variables['items'] as $delta => &$item) {
      $item['content']['#constrain_width'] = false;
    }
  }

  if ($variables['field_type'] === 'image') {
    foreach ($variables['items'] as $delta => &$item) {
      // Set a default for constrain_width in all image field items so that we
      // don't get an PHP undefined notice when the Image component attempts to
      // read it where it isn't already explicitly set. An example of this is on
      // user profile image fields.
      if (!isset($item['content']['#constrain_width'])) {
        $item['content']['#constrain_width'] = true;
      }
    }

    $componentManager = \Drupal::service(
      'plugin.manager.ambientimpact_component'
    );
    $imageComponent = $componentManager->getComponentInstance('image');

    $imageComponent->preprocessFieldSetImageFieldMaxWidth($variables);
  }

  if ($variables['field_type'] === 'link') {
    foreach ($variables['element']['#items'] as $i => $item) {
      if (!empty($item->title)) {
        $linkClass = 'field__item--link-has-title';
      } else {
        $linkClass = 'field__item--link-no-title';
      }

      $variables['items'][$i]['attributes']->addClass($linkClass);
    }
  }
}

/**
 * Prepares variables for responsive image formatter templates.
 *
 * @see \Drupal\ambientimpact_base\ResponsiveImageFormatterPreprocess::preprocess()
 *   Variables preprocessed by this.
 */
function ambientimpact_base_preprocess_responsive_image_formatter(
  &$variables
): void {

  \Drupal::classResolver(ResponsiveImageFormatterPreprocess::class)->preprocess(
    $variables
  );

}

/**
 * Prepares variables for single local action link templates.
 *
 * Default template: menu-local-action.html.twig.
 *
 * This removes the default 'button' and 'button-action' classes from links
 * (to remove any default button styles) and adds our own BEM classes. This is
 * far easier to do in this function than in the Twig template, where it should
 * ideally be.
 *
 * Additionally, this wraps the link text in an icon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element containing:
 *     - #link: A menu link array with 'title', 'url', and (optionally)
 *       'localized_options' keys.
 *
 * @see template_preprocess_menu_local_action()
 *   Sets the default classes.
 */
function ambientimpact_base_preprocess_menu_local_action(&$variables): void {
  $baseClass = 'action-links';
  $linkAttributes = &$variables['link']['#options']['attributes'];

  // Remove the 'button' and 'button-action' classes but leave any others
  // intact.
  foreach ($linkAttributes['class'] as $key => $class) {
    if (
      $class !== 'button' &&
      $class !== 'button-action'
    ) {
      continue;
    }

    unset($linkAttributes['class'][$key]);
  }

  // Re-number the array indices so they're sequential again as unsetting
  // doesn't remove the index.
  $linkAttributes['class'] = array_values($linkAttributes['class']);

  $linkAttributes['class'][] = $baseClass . '__link';

  $variables['attributes']['class'][] = $baseClass . '__item';

  // If the link text is a string (and not a render array), wrap it in an icon.
  // The check is to try and not conflict with modules that might have altered
  // the link in ways we're not expecting.
  if (gettype($variables['link']['#title']) === 'string') {
    $variables['link']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'plus',
      '#bundle'   => 'core',
      '#text'     => $variables['link']['#title'],
      '#containerAttributes'  => [
        'class'     => [$baseClass . '__icon'],
      ],
    ];
  }
}
